<?php
/**
 * Created by PhpStorm.
 * User: zhangzenan
 * Date: 2017/9/15
 * Time: 14:59
 */

namespace app\controllers;


use app\models\Weibo;
use app\models\WeiboComment;
use app\models\WeiboRelationship;
use common\services\QiniuService;
use common\services\TokenService;

class WeiboController extends BaseController
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }


    /**
     * 查询微博
     */
    public function actionGetWeiboList()
    {
        $params = $this->post();
        $page = $params['page'];
        $uid = $params['uid'];
        if (!is_numeric($uid)) {
            return $this->renderJSON(-1003, 'denied');
        }
        $query = Weibo::find()->select('weibo.*,u.FstrUserNickname,u.FstrUserIcon,u.FuiId as UserId')
            ->innerJoin('weibo_relationship wr', 'wr.FuiFocusId=weibo.FuiUserId')
            ->innerJoin('users u', 'u.FuiId=weibo.FuiUserId')
            ->where(['wr.FuiUserId' => $uid])
            ->orderBy('weibo.FuiId desc');
        $offset = ($page - 1) * self::pageSize2;
        $data = $query->offset($offset)->limit(self::pageSize2)->asArray()->all();
        if (count($data) == 0) {
            return $this->renderJSON(-1, 'no data');
        }
        return $this->renderJSON(0, 'success', $data);
    }

    /**
     * 查询微博评论
     */
    public function actionGetWeiboComment()
    {
        $params = $this->post();
        $page = $params['page'];
        $wid = $params['wid'];
        if (!is_numeric($wid)) {
            return $this->renderJSON(-1003, 'denied');
        }
        $query = WeiboComment::find()->select('weibo_comment.*,u.FstrUserNickname,u.FstrUserIcon,u.FuiId as UserId')
            ->innerJoin('users u', 'weibo_comment.FuiUserId=u.FuiId')
            ->where(['weibo_comment.FuiWeiboId' => $wid]);
        $offset = ($page - 1) * self::pageSize2;
        $data = $query->offset($offset)->limit(self::pageSize2)->asArray()->all();
        if (count($data) == 0) {
            return $this->renderJSON(-1, 'no data');
        }
        return $this->renderJSON(0, 'success', $data);
    }

    /**
     * 发布微博(包括图片)
     */
    public function actionApplyWeibo()
    {
        $params = $this->post();
        $weiboPics = $_FILES;
        $photoAry = [];
        $weibo = new Weibo();
        $service = new QiniuService();
        foreach ($weiboPics as $v) {
            $fileName = time() . $v['name'];
            $result = $service->upload($fileName, $v['tmp_name']);
            if ($result['ret'] == 0) {
                $url = $result['data']['url'];
                array_push($photoAry, $url);
            } else {
                return $this->renderJSON(-1001, 'photo failed');
            }
        }
        $weibo->FstrPhotoUrl = json_encode($photoAry);
        $weibo->FuiUserId = $params['FuiUserId'];
        $weibo->FstrConetent = $params['FstrContent'];
        $weibo->FuiCreateTime = time();
        if (!$weibo->save()) {
            return $this->renderJSON(-1002, 'failed');
        }
        return $this->renderJSON(0, 'success');
    }

    /**
     * 关注
     */
    public function actionFocusUser()
    {
        $params = $this->post();
        if (!is_numeric($params['FuiUserId']) || !is_numeric($params['FuiFocusId'])) {
            return $this->renderJSON(-1003, 'denied');
        }
        $weiboRelationship = new WeiboRelationship();
        $weiboRelationship->FuiUserId = $params['FuiUserId'];
        $weiboRelationship->FuiFocusId = $params['FuiFocusId'];
        $weiboRelationship->FuiCreateTime = time();
        if (!$weiboRelationship->save()) {
            return $this->renderJSON(-1001, 'failed');
        }
        return $this->renderJSON(0, 'success');
    }

    /**
     * 不再关注
     */
    public function actionDeleteFocusUser()
    {
        $params = $this->post();
        if (!is_numeric($params['relationshipId'])) {
            return $this->renderJSON(-1003, 'denied');
        }
        if ($params['token'] != TokenService::createToken($params['relationshipId'])) {
            return $this->renderJSON(-1001, 'permission denied');
        }
        $weiboRelationShip = WeiboRelationship::findOne(['FuiId' => $params['relationshipId']]);
        if (empty($weiboRelationShip)) {
            return $this->renderJSON(-1002, 'not exist');
        }
        if (!$weiboRelationShip->delete()) {
            return $this->renderJSON(-1004, 'failed');
        }
        return $this->renderJSON(0, 'success');
    }

    /**
     * 获得关注列表
     */
    public function actionFocusList()
    {
        $uid = $this->post('uid');
        $page = $this->post('page');
        if (!is_numeric($uid)) {
            return $this->renderJSON(-1003, 'denied');
        }
        $query = WeiboRelationship::find()->select('weibo_relationship.*,
                u.FstrUserNickname,u.FstrUserIcon,u.FuiId as UserId')
            ->innerJoin('users u', 'weibo_relationship.FuiFocusId=u.FuiId')
            ->where(['weibo_relationship.FuiUserId' => $uid]);
        $offset = ($page - 1) * self::pageSize2;
        $data = $query->offset($offset)->limit(self::pageSize2)->asArray()->all();
        if (count($data) == 0) {
            return $this->renderJSON(-1001, 'no data');
        }
        return $this->renderJSON(0, 'success', $data);
    }

    /**
     * 获得粉丝列表
     */
    public function actionFansList()
    {
        $uid = $this->post('uid');
        $page = $this->post('page');
        if (!is_numeric($uid)) {
            return $this->renderJSON(-1003, 'denied');
        }
        $query = WeiboRelationship::find()->select('weibo_relationship.*,
                u.FstrUserNickname,u.FstrUserIcon,u.FuiId as UserId')
            ->innerJoin('users u', 'weibo_relationship.FuiUserId=u.FuiId')
            ->where(['weibo_relationship.FuiFocus' => $uid]);
        $offset = ($page - 1) * self::pageSize2;
        $data = $query->offset($offset)->limit(self::pageSize2)->asArray()->all();
        if (count($data) == 0) {
            return $this->renderJSON(-1001, 'no data');
        }
        return $this->renderJSON(0, 'success', $data);
    }

}